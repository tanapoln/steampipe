name: Steampipe Release (CLI and Assets)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release (must be prefixed with 'v')"
        required: true

env:
  PROJECT_ID: steampipe
  CORE_REPO: ghcr.io/tanapoln/steampipe
  ORG: turbot
  ASSET_IMAGE_NAME: assets
  CONFIG_SCHEMA_VERSION: "2020-11-18"
  VERSION: ${{ github.event.inputs.version }}
  STEAMPIPE_UPDATE_CHECK: false
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  SPIPETOOLS_PG_CONN_STRING: ${{ secrets.SPIPETOOLS_PG_CONN_STRING }}
  SPIPETOOLS_TOKEN: ${{ secrets.SPIPETOOLS_TOKEN }}

jobs:

  verify_input:
    name: Verify Inputs
    runs-on: ubuntu-latest
    steps:
    - name: Trim asset version prefix and Validate
      run: |-
        echo $VERSION
        trim=${VERSION#"v"}
        echo $trim
        if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
          echo "Version OK: $trim"
        else
          echo "Invalid version: $trim"
          exit 1
        fi
        echo "VERSION=${trim}" >> $GITHUB_ENV

    - name: Validate Branch
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

  build_and_release_assets:
    name: Build and Release Assets
    needs: [ verify_input ]
    runs-on: ubuntu-latest
    steps:
    - name: Trim asset version prefix and Validate
      run: |-
        echo $VERSION
        trim=${VERSION#"v"}
        echo $trim
        if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
          echo "Version OK: $trim"
        else
          echo "Invalid version: $trim"
          exit 1
        fi
        echo "VERSION=${trim}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Setup Yarn
      working-directory: ./ui/dashboard
      run: |-
        rm -rf ./build

    - name: YARN Install
      working-directory: ./ui/dashboard
      run: |-
        unset CI
        yarn install

    - name: Generate dashboard UI icons
      working-directory: ./ui/dashboard
      run: |-
        make setup

    - name: Run Unit Tests
      working-directory: ./ui/dashboard
      run: |
        yarn install
        CI=true yarn test

    - name: YARN Build
      working-directory: ./ui/dashboard
      run: |-
        unset CI
        yarn build
      env:
        REACT_APP_HEAP_ID: ${{ secrets.HEAP_ANALYTICS_PRODUCTION_ID }}
        REACT_APP_VERSION: ${{ env.VERSION }}

    - name: Move Build Assets
      run: |-
        mkdir -p dashboard_ui_build
        mv ./ui/dashboard/build/* dashboard_ui_build/
        ls -la dashboard_ui_build

    - name: Create a version file
      run: |-
        JSON_STRING=$( jq -n \
            --arg version "$VERSION" \
          '{
              "version":$version,
          }' )

          echo $JSON_STRING > ./dashboard_ui_build/versions.json

    - name: Create Image Config File
      run: |-
        JSON_STRING=$( jq -n \
          --arg name "${{ env.ASSET_IMAGE_NAME }}" \
          --arg organization "$ORG" \
          --arg version "$VERSION" \
          --arg schemaVersion "$CONFIG_SCHEMA_VERSION" \
          '{schemaVersion: $schemaVersion, assets: { name: $name, organization: $organization, version: $version} }' )

        echo $JSON_STRING > config.json

    - name: Create Image Annotations File
      run: |-
        JSON_STRING=$( jq -n \
            --arg title "${{ env.ASSET_IMAGE_NAME }}" \
            --arg desc "$ORG" \
            --arg version "$VERSION" \
            --arg timestamp "$(date +%FT%TZ)" \
            --arg vendor "Turbot HQ, Inc." \
          '{
              "$manifest": {
                  "org.opencontainers.image.title": $title,
                  "org.opencontainers.image.description": $desc,
                  "org.opencontainers.image.version": $version,
                  "org.opencontainers.image.created": $timestamp,
                  "org.opencontainers.image.vendor":  $vendor
              }
          }' )

          echo $JSON_STRING > annotations.json        

    - name: Generate Image REF
      id: image_ref
      run: |
        cat config.json
        cat annotations.json
        cat dashboard_ui_build/versions.json
        REF="${{ env.CORE_REPO }}/${{ env.ASSET_IMAGE_NAME }}:${{ env.VERSION }}"
        echo "REF=$REF" >> $GITHUB_OUTPUT

    - name: Push to registry
      run: |-
        oras push ${{ steps.image_ref.outputs.REF }} \
          --config config.json:application/vnd.turbot.steampipe.config.v1+json \
          --annotation-file annotations.json \
          dashboard_ui_build:application/vnd.turbot.steampipe.assets.report.layer.v1+tar \

  create_release_tag:
    name: Tag Release
    needs: [ build_and_release_assets ]
    runs-on: ubuntu-latest
    steps:
    - name: Trim asset version prefix and Validate
      run: |-
        echo $VERSION
        trim=${VERSION#"v"}
        echo $trim
        if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
          echo "Version OK: $trim"
        else
          echo "Invalid version: $trim"
          exit 1
        fi
        echo "VERSION=${trim}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.ref }}

    - name: Unshallow
      run: git fetch --prune --unshallow

    - name: Tag Release
      run: |
        git config user.name "Steampipe GitHub Actions Bot"
        git config user.email noreply@github.com
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}

  build_and_release_cli:
    name: Release CLI
    needs: [ create_release_tag ]
    runs-on: ubuntu-latest
    steps:
    - name: Trim asset version prefix and Validate
      run: |-
        echo $VERSION
        trim=${VERSION#"v"}
        echo $trim
        if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
          echo "Version OK: $trim"
        else
          echo "Invalid version: $trim"
          exit 1
        fi
        echo "VERSION=${trim}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.version }}

    - name: Unshallow
      run: git fetch --prune --unshallow

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  clean_up:
    # let's clean up the artifacts.
    # in case this step isn't reached,
    # artifacts automatically expire after 90 days anyway
    # refer:
    #   https://docs.github.com/en/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts#downloading-and-deleting-artifacts-after-a-workflow-run-is-complete
    name: Clean Up Artifacts
    needs: [ ]
    runs-on: ubuntu-latest
    steps:
    - name: Clean up Linux Build
      uses: geekyeggo/delete-artifact@v2
      with:
        name: build-artifact-linux

    - name: Clean up Darwin Build
      uses: geekyeggo/delete-artifact@v2
      with:
        name: build-artifact-darwin